{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/active-tables/active-tables.component.ts","./src/app/active-tables/active-tables.component.html","./src/app/add-column/add-column.component.ts","./src/app/add-column/add-column.component.html","./src/app/add-db/add-db.component.ts","./src/app/add-db/add-db.component.html","./src/app/add-rule/add-rule.component.ts","./src/app/add-rule/add-rule.component.html","./src/app/add-table/add-table.component.ts","./src/app/add-table/add-table.component.html","./src/app/add-user/add-user.component.ts","./src/app/add-user/add-user.component.html","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/drop-column/drop-column.component.ts","./src/app/drop-column/drop-column.component.html","./src/app/drop-rule/drop-rule.component.ts","./src/app/drop-rule/drop-rule.component.html","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/services/active-tables.service.ts","./src/app/services/add-column.service.ts","./src/app/services/drop-column.service.ts","./src/app/services/tree-table.service.ts","./src/app/services/user.service.ts","./src/app/tree-table/tree-table.component.ts","./src/app/tree-table/tree-table.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit, Input, OnChanges, SimpleChanges, Inject } from '@angular/core';\nimport { ActiveTablesService } from '../services/active-tables.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AddColumnComponent } from '../add-column/add-column.component';\nimport { DropColumnComponent } from '../drop-column/drop-column.component';\nimport { AddRuleComponent } from '../add-rule/add-rule.component';\nimport { DropRuleComponent } from '../drop-rule/drop-rule.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n@Component({\n  selector: 'app-active-tables',\n  templateUrl: './active-tables.component.html',\n  styleUrls: ['./active-tables.component.css']\n})\nexport class ActiveTablesComponent implements OnInit, OnChanges {\n\n  @Input()\n  activeTables: string = '';\n  @Input()\n  activeDb: string = '';\n  isCharging: boolean;\n  id: number;\n  displayedColumns = Array();\n  lengthColumns = Array();\n  dataSource: any[];\n  rules: any[] = [];\n\n  constructor(private service: ActiveTablesService, public dialog: MatDialog, private _snackBar: MatSnackBar) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n  }\n\n  ngOnInit(): void { }\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.activeTables == '' || this.activeDb == '') {\n      this.rules = [];\n      this.dataSource = [];\n      this.displayedColumns = Array();\n    }\n    else\n      this.chargeDataOnWorkSpace();\n  }\n\n  chargeDataOnWorkSpace() {\n    this.isCharging = true;\n    if (this.activeTables != '') {\n      this.service.getTableRecordsService(this.id, this.activeTables, this.activeDb, this.rules).done(\n        (data: any) => {\n          this.displayedColumns = new Array();\n          let i = 0;\n          for (const item of data['columns']) {\n            this.lengthColumns[item] = i;\n            i++;\n          }\n          this.displayedColumns = data['columns'];\n          this.dataSource = data['data'];\n          this.isCharging = false;\n          if (data['state'] == 505) {\n            this.openSnackBar('Values of the rule was incorrect!');\n            this.rules.pop();\n          }\n          else\n            this.openSnackBar('Data succesfully loaded!');\n        }\n      );\n    }\n  }\n\n  openAddColumnDialog(): void {\n    const dialogRef = this.dialog.open(AddColumnComponent, {\n      width: '350px',\n      data: {\n        \"columns\": this.displayedColumns,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  openDropColumnDialog(): void {\n    const dialogRef = this.dialog.open(DropColumnComponent, {\n      width: '350px',\n      data: {\n        \"columns\": this.displayedColumns,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  openAddRuleDialog(): void {\n    const dialogRef = this.dialog.open(AddRuleComponent, {\n      width: '350px',\n      data: {\n        \"columns\": this.displayedColumns,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      if (data != undefined)\n        this.rules.push(data);\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  openDropRuleDialog(): void {\n    const dialogRef = this.dialog.open(DropRuleComponent, {\n      width: '350px',\n      data: {\n        \"rules\": this.rules,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      if (data != undefined)\n        this.rules = data;\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}","<br>\n<div *ngIf=\"activeTables\">\n    <div class=\"example-button-row\" *ngIf=\"activeTables\">\n        <button mat-stroked-button color=\"warn\" (click)=\"openAddColumnDialog()\">Add column <mat-icon>\n                add_circle_outline\n            </mat-icon></button>\n        <button mat-stroked-button color=\"warn\" (click)=\"openDropColumnDialog()\">Drop column <mat-icon>\n                delete_outline\n            </mat-icon></button>\n        <button mat-stroked-button color=\"warn\" (click)=\"openAddRuleDialog()\">Add rule <mat-icon>\n                add_circle_outline\n            </mat-icon></button>\n        <button mat-stroked-button color=\"warn\" (click)=\"openDropRuleDialog()\">Drop rule <mat-icon>\n                delete_outline\n            </mat-icon></button>\n    </div>\n    <br>\n    <div class=\"example-container mat-elevation-z8\">\n        <table mat-table [dataSource]=\"dataSource\" *ngIf=\"dataSource\">\n            <div *ngFor=\"let item of displayedColumns\">\n                <ng-container matColumnDef={{item}}>\n                    <th mat-header-cell *matHeaderCellDef> {{item}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element[lengthColumns[item]]}} </td>\n                </ng-container>\n            </div>\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n    </div>\n    <div *ngIf=\"isCharging\" class=\"loading\">\n        <mat-spinner></mat-spinner>\n    </div>\n</div>","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AddColumnService } from '../services/add-column.service';\n\n@Component({\n  selector: 'app-add-column',\n  templateUrl: './add-column.component.html',\n  styleUrls: ['./add-column.component.css']\n})\nexport class AddColumnComponent implements OnInit {\n\n  displayedColumns;\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n  nameAddColumn: string = '';\n  nameAddColumnFormControl = new FormControl('', [Validators.required]);\n  firstSelectedAddColumn: string = '';\n  firstSelectedAddColumnFormControl = new FormControl('', [Validators.required]);\n  secondSelectedAddColumn: string = '';\n  secondSelectedAddColumnFormControl = new FormControl('', [Validators.required]);\n  operationSelectedAddColumn: string = '';\n  operationSelectedAddColumnFormControl = new FormControl('', [Validators.required]);\n\n  constructor(public dialogRef: MatDialogRef<AddColumnComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private service: AddColumnService) {\n    this.displayedColumns = data.columns;\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  addColumn(): void {\n    if (this.nameAddColumn != '')\n      if (this.firstSelectedAddColumn != '')\n        if (this.secondSelectedAddColumn != '')\n          if (this.operationSelectedAddColumn != '') {\n            this.service.addColumnService(this.dbName, this.tableName, this.nameAddColumn, this.idUser,\n              this.firstSelectedAddColumn, this.secondSelectedAddColumn, this.operationSelectedAddColumn);\n            this.onNoClick();\n          }\n          else\n            this.nameAddColumnFormControl.hasError('required')\n        else\n          this.firstSelectedAddColumnFormControl.hasError('required')\n      else\n        this.secondSelectedAddColumnFormControl.hasError('required')\n    else\n      this.operationSelectedAddColumnFormControl.hasError('required')\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close('ok');\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Add a new column!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\">\n        <mat-label>New column name</mat-label>\n        <input matInput [formControl]=\"nameAddColumnFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write here your new column name\" [(ngModel)]=\"nameAddColumn\">\n        <mat-error *ngIf=\"nameAddColumnFormControl.hasError('required')\">\n            Name is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a column</mat-label>\n        <mat-select [(value)]=\"firstSelectedAddColumn\" [formControl]=\"firstSelectedAddColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"firstSelectedAddColumnFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select an operation</mat-label>\n        <mat-select [(value)]=\"operationSelectedAddColumn\" [formControl]=\"operationSelectedAddColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option value=\"+\">+</mat-option>\n            <mat-option value=\"-\">-</mat-option>\n            <mat-option value=\"*\">*</mat-option>\n            <mat-option value=\"/\">/</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"operationSelectedAddColumnFormControl.hasError('required')\">\n            Operation select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select another column</mat-label>\n        <mat-select [(value)]=\"secondSelectedAddColumn\" [formControl]=\"secondSelectedAddColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"secondSelectedAddColumnFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"addColumn()\">\n            Add column <mat-icon>add_circle_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators, FormGroupDirective, NgForm } from '@angular/forms';\nimport { TreeTableService } from '../services/tree-table.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-add-db',\n  templateUrl: './add-db.component.html',\n  styleUrls: ['./add-db.component.css']\n})\nexport class AddDbComponent implements OnInit {\n\n  id: number;\n  name: string = '';\n  nameFormControl = new FormControl('', [Validators.required]);\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: TreeTableService, public dialogRef: MatDialogRef<AddDbComponent>, private _snackBar: MatSnackBar) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  addDB() {\n    if (this.name != '')\n      if (this.name.split(\"/\").length > 1)\n        this.name = '';\n      else {\n        this.service.addDbService(this.name, this.id);\n        this.onNoClick();\n      }\n    else\n      this.nameFormControl.hasError('required');\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h1 mat-dialog-title>Add a new DB!</h1>\n<div mat-dialog-content>\n    <form class=\"example-form\">\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>DB name</mat-label>\n            <input matInput [formControl]=\"nameFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Write your DB name here\" [(ngModel)]=\"name\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"nameFormControl.hasError('required')\">\n                DB name is <strong>required</strong>\n            </mat-error>\n        </mat-form-field>\n    </form>\n</div>\n<br>\n<div class=\"text-center\">\n    <button mat-raised-button color=\"accent\" (click)=\"onNoClick()\">No Thanks <mat-icon>close</mat-icon></button>\n    <button mat-raised-button color=\"primary\" (click)=\"addDB()\">Add <mat-icon>add</mat-icon></button>\n</div>","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-add-rule',\n  templateUrl: './add-rule.component.html',\n  styleUrls: ['./add-rule.component.css']\n})\nexport class AddRuleComponent implements OnInit {\n\n  displayedColumns;\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n\n  rule: { column: string, rule: string, fValue: string, sValue: string };\n  columnToApply: string = '';\n  columnToApplyFormControl = new FormControl('', [Validators.required]);\n  ruleSelectedAddRule: string = '';\n  ruleSelectedAddRuleFormControl = new FormControl('', [Validators.required]);\n  firstValueRule: string = '';\n  firstValueRuleFormControl = new FormControl('', [Validators.required]);\n  secondValueRule: string = '';\n  secondValueRuleFormControl = new FormControl('', [Validators.required]);\n\n  constructor(public dialogRef: MatDialogRef<AddRuleComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private _snackBar: MatSnackBar) {\n    this.displayedColumns = data.columns;\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  addRule(): void {\n    if (this.columnToApply != '')\n      if (this.ruleSelectedAddRule != '')\n        if (this.firstValueRule != '') {\n          if (this.ruleSelectedAddRule == '<>' && this.secondValueRule == '')\n            this.secondValueRuleFormControl.hasError('required');\n          else {\n            this.rule = {\n              column: this.columnToApply,\n              rule: this.ruleSelectedAddRule,\n              fValue: this.firstValueRule,\n              sValue: this.secondValueRule\n            }\n            this.openSnackBar('Rule added!');\n            this.onNoClick();\n          }\n        }\n        else\n          this.firstValueRuleFormControl.hasError('required');\n      else\n        this.ruleSelectedAddRuleFormControl.hasError('required');\n    else\n      this.columnToApplyFormControl.hasError('required');\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(this.rule);\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Add a new rule!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a column</mat-label>\n        <mat-select [(value)]=\"columnToApply\" [formControl]=\"columnToApplyFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"columnToApplyFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a rule</mat-label>\n        <mat-select [(value)]=\"ruleSelectedAddRule\" [formControl]=\"ruleSelectedAddRuleFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option value=\"<\">< (start with)</mat-option>\n            <mat-option value=\">\">> (end with)</mat-option>\n            <mat-option value=\"<=\"><= (not contains)</mat-option>\n            <mat-option value=\">=\">>= (contains)</mat-option>\n            <mat-option value=\"=\">=</mat-option>\n            <mat-option value=\"!=\">!=</mat-option>\n            <mat-option value=\"<>\">Between</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"ruleSelectedAddRuleFormControl.hasError('required')\">\n            Rule select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n    \n    <mat-form-field class=\"example-full-width\">\n        <mat-label>Value for the rule</mat-label>\n        <input matInput [formControl]=\"firstValueRuleFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write here the value of the rule\" [(ngModel)]=\"firstValueRule\">\n        <mat-error *ngIf=\"firstValueRuleFormControl.hasError('required')\">\n            Value is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <ng-container *ngIf=\"ruleSelectedAddRule == '<>'\">\n\n        <br><br>\n        \n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Value for the rule</mat-label>\n            <input matInput [formControl]=\"secondValueRuleFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write here your new column name\" [(ngModel)]=\"secondValueRule\">\n            <mat-error *ngIf=\"secondValueRuleFormControl.hasError('required')\">\n                Value is <strong>required</strong>\n            </mat-error>\n        </mat-form-field>\n    </ng-container>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"addRule()\">\n            Add rule <mat-icon>add_circle_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators, FormGroupDirective, NgForm } from '@angular/forms';\nimport { TreeTableService } from '../services/tree-table.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-add-table',\n  templateUrl: './add-table.component.html',\n  styleUrls: ['./add-table.component.css']\n})\nexport class AddTableComponent implements OnInit {\n\n  id: number;\n  db: string;\n  file: File;\n  name: string;\n  nameFormControl = new FormControl('', [Validators.required]);\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: TreeTableService, public dialogRef: MatDialogRef<AddTableComponent>, private _snackBar: MatSnackBar) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  handleFileInput(files: FileList) {\n    this.file = files.item(0);\n    this.name = files.item(0).name;\n  }\n\n  addTable() {\n    if (this.file != null) {\n      this.service.addTableService(this.file, this.id, this.db, this.name);\n      this.onNoClick();\n    }\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h1 mat-dialog-title>Add a new table!</h1>\n<div mat-dialog-content>\n    <form class=\"example-form\">\n        <label>Upload file</label>\n        <input type=\"file\" class=\"example-full-width\" accept=\".csv\" (change)=\"handleFileInput($event.target.files)\">\n    </form>\n</div>\n<br>\n<div class=\"text-center\">\n    <button mat-raised-button color=\"accent\" (click)=\"onNoClick()\">No Thanks <mat-icon>close</mat-icon></button>\n    <button mat-raised-button color=\"primary\" (click)=\"addTable()\">Add <mat-icon>add</mat-icon></button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  username: string = '';\n  password: string = '';\n  passwordConfirm: string = '';\n\n  usernameFormControl = new FormControl('', [Validators.required, Validators.minLength(8)]);\n  passwordFormControl = new FormControl('', [Validators.required, Validators.minLength(8)]);\n  passwordConfirmFormControl = new FormControl('', [Validators.required, Validators.minLength(8)]);\n\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: UserService, public dialogRef: MatDialogRef<AddUserComponent>, private _snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  addUser() {\n    if (this.password == this.passwordConfirm) {\n      if (this.username.length >= 8 && this.password.length >= 8) {\n        this.service.httpCreateUser(this.username, this.password);\n        this.onNoClick()\n      }\n      else {\n        this.usernameFormControl.hasError('required');\n        this.passwordFormControl.hasError('required');\n      }\n    } else {\n      this.openSnackBar('Password not match!');\n      this.passwordFormControl.hasError('required');\n      this.passwordConfirmFormControl.hasError('required');\n    }\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h1 mat-dialog-title>Register you here!</h1>\n<div mat-dialog-content>\n    <form class=\"example-form\">\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Username</mat-label>\n            <input matInput [formControl]=\"usernameFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Write your username here\" [(ngModel)]=\"username\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"usernameFormControl.hasError('required')\">\n                Username is <strong>required</strong>\n            </mat-error>\n            <mat-error *ngIf=\"usernameFormControl.hasError('minlength')\">\n                Username min length is <strong>8 characters</strong>\n            </mat-error>\n        </mat-form-field>\n        <br><br>\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Password</mat-label>\n            <input type=\"password\" matInput [formControl]=\"passwordFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Write your password here\" [(ngModel)]=\"password\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"passwordFormControl.hasError('required')\">\n                Password is <strong>required</strong>\n            </mat-error>\n            <mat-error *ngIf=\"passwordFormControl.hasError('minlength')\">\n                Password min length is <strong>8 characters</strong>\n            </mat-error>\n        </mat-form-field>\n        <br><br>\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Confirm password</mat-label>\n            <input type=\"password\" matInput [formControl]=\"passwordConfirmFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Rewrite your password here\" [(ngModel)]=\"passwordConfirm\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"passwordConfirmFormControl.hasError('required')\">\n                Password not match\n            </mat-error>\n            <mat-error *ngIf=\"passwordConfirmFormControl.hasError('minlength')\">\n                Password confirm min length is <strong>8 characters</strong>\n            </mat-error>\n        </mat-form-field>\n    </form>\n</div>\n<br>\n<div  class=\"text-center\">\n    <button mat-raised-button color=\"accent\" (click)=\"onNoClick()\">No Thanks <mat-icon>close</mat-icon></button>\n    <button mat-raised-button color=\"primary\" (click)=\"addUser()\">Sign-in <mat-icon>how_to_reg</mat-icon></button>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Ang';\n\n  isLoged: boolean = false;\n  id: number = null;\n  activeTables: string = '';\n  activeDb: string = '';\n\n  constructor(private _snackBar: MatSnackBar) {\n    this.checkLoged()\n  }\n\n  checkLoged() {\n    if (this.isLoged == false) {\n      let list = document.cookie.split(';');\n      for (const iterator of list) {\n        let item = iterator.split('=');\n        if (item[0].trim() == 'id')\n          if (item[1] != '')\n            this.id = Number.parseInt(item[1]);\n      }\n      if (this.id != null) {\n        this.isLoged = true;\n        this.openSnackBar('Welcome you are logged!', this._snackBar);\n      }\n      else\n        this.isLoged = false;\n    }\n  }\n\n  logOut() {\n    document.cookie = 'id=';\n    this.isLoged = false;\n    this.id = null;\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n  receiveTableActive($event) {\n    this.activeTables = $event;\n  }\n  \n  receiveDbActive($event) {\n    this.activeDb = $event;\n  }\n\n}\n","<mat-drawer-container class=\"example-container\" [hasBackdrop]=\"true\">\n  <mat-drawer #drawer [mode]=\"true\">\n    <div *ngIf=\"isLoged==true;else notLoggedSidebar\">\n      <p>\n        You are logged! <button mat-button color=\"warn\" (click)=\"logOut()\">Log-out <mat-icon>exit_to_app</mat-icon>\n        </button>\n      </p>\n      <app-tree-table (dbActiveEvent)=\"receiveDbActive($event)\" (tableActiveEvent)=\"receiveTableActive($event)\" [drawer]=\"drawer\">\n      </app-tree-table>\n    </div>\n    <ng-template #notLoggedSidebar>\n      <h3>\n        <mat-icon style=\"font-size: 48px;\">error</mat-icon> You need to be logged to see your DB's!\n      </h3>\n    </ng-template>\n  </mat-drawer>\n  <mat-drawer-content>\n    <button mat-raised-button class=\"button-menu\" (click)=\"drawer.toggle(); checkLoged();\">\n      <mat-icon>menu_open</mat-icon>\n    </button>\n    <ng-container *ngIf=\"(!activeTables) && isLoged\"> \n      <br>\n      <br>\n      <mat-icon style=\"font-size: 48px;\">reply</mat-icon>\n      <h1>No table selected!</h1>\n      <h2>Search on the sidebar to add or view some item!</h2>\n    </ng-container>\n    <div *ngIf=\"isLoged==true;else notLoggedContent\">\n      <app-active-tables [activeTables]=\"activeTables\" [activeDb]=\"activeDb\"></app-active-tables>\n    </div>\n    <ng-template #notLoggedContent>\n      <br>\n      <app-login class=\"login-alignement\"></app-login>\n    </ng-template>\n  </mat-drawer-content>\n</mat-drawer-container>\n\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog'\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatListModule } from '@angular/material/list';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatMenuModule } from '@angular/material/menu';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LoginComponent } from './login/login.component';\nimport { AddUserComponent } from './add-user/add-user.component';\nimport { TreeTableComponent } from './tree-table/tree-table.component';\nimport { AddDbComponent } from './add-db/add-db.component';\nimport { AddTableComponent } from './add-table/add-table.component';\nimport { ActiveTablesComponent } from './active-tables/active-tables.component';\nimport { AddColumnComponent } from './add-column/add-column.component';\nimport { DropColumnComponent } from './drop-column/drop-column.component';\nimport { DropRuleComponent } from './drop-rule/drop-rule.component';\nimport { AddRuleComponent } from './add-rule/add-rule.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    AddUserComponent,\n    TreeTableComponent,\n    AddDbComponent,\n    AddTableComponent,\n    ActiveTablesComponent,\n    AddColumnComponent,\n    DropColumnComponent,\n    DropRuleComponent,\n    AddRuleComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatSidenavModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatProgressSpinnerModule,\n    MatTabsModule,\n    MatMenuModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DropColumnService } from '../services/drop-column.service';\n\n@Component({\n  selector: 'app-drop-column',\n  templateUrl: './drop-column.component.html',\n  styleUrls: ['./drop-column.component.css']\n})\nexport class DropColumnComponent implements OnInit {\n\n  displayedColumns;\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n  selectedDropColumn: string = '';\n  selectedDropColumnFormControl = new FormControl('', [Validators.required],);\n\n  constructor(public dialogRef: MatDialogRef<DropColumnComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private service: DropColumnService) {\n    this.displayedColumns = data.columns;\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  dropColumn(): void {\n    if (this.selectedDropColumn != '') {\n      this.service.dropColumnService(this.dbName, this.tableName, this.selectedDropColumn, this.idUser);\n      this.onNoClick();\n    }\n    else\n      this.selectedDropColumnFormControl.hasError('required')\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(this.selectedDropColumn);\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Drop an existing column!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a column</mat-label>\n        <mat-select [(value)]=\"selectedDropColumn\" [formControl]=\"selectedDropColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"selectedDropColumnFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"dropColumn()\">\n            Drop column <mat-icon>delete_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-drop-rule',\n  templateUrl: './drop-rule.component.html',\n  styleUrls: ['./drop-rule.component.css']\n})\nexport class DropRuleComponent implements OnInit {\n  rules: any[] = [];\n  rulesTrated: any[] = [];\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n\n  ruleToDrop: number = -1;\n  ruleToDropFormControl = new FormControl('', [Validators.required]);\n\n  constructor(public dialogRef: MatDialogRef<DropRuleComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private _snackBar: MatSnackBar) {\n    let i: number = 0;\n    this.rules = data.rules;\n    if (data.rules.length != 0) {\n      for (const item of data.rules) {\n        if (item['rule'] == '<>')\n          this.rulesTrated.push({\n            id: i,\n            text: item.column + ' between ' + item.fValue + ' to ' + item.sValue\n          });\n        else\n          this.rulesTrated.push({\n            id: i,\n            text: item.column + ' ' + item.rule + ' ' + item.fValue\n          });\n        i++;\n      }\n    }\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  dropRule(): void {\n    if (this.ruleToDrop != -1) {\n      let i = 0;\n      let rulesFilter: any[] = [];\n      for (const item of this.rules) {\n        if (i != this.ruleToDrop)\n          rulesFilter.push(item);\n        i++;\n      }\n      this.rules = rulesFilter;\n      this.openSnackBar('Rule droped!');\n      this.onNoClick();\n    }\n    else\n      this.ruleToDropFormControl.hasError('required');\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(this.rules);\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Drop an existing rule!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a rule</mat-label>\n        <mat-select [(value)]=\"ruleToDrop\" [formControl]=\"ruleToDropFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of rulesTrated\" value=\"{{item.id}}\">{{item.text}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"ruleToDropFormControl.hasError('required')\">\n            Rule select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"dropRule()\">\n            Drop rule <mat-icon>delete_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { AddUserComponent } from '../add-user/add-user.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  username: string = '';\n  password: string = '';\n  usernameFormControl = new FormControl('', [\n    Validators.required,\n    Validators.minLength(8)\n  ]);\n  passwordFormControl = new FormControl('', [\n    Validators.required,\n    Validators.minLength(8)\n  ]);\n\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: UserService, public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n  }\n\n  authUser() {\n    if (this.username.length >= 8 && this.password.length >= 8) {\n      this.service.httpAuthUser(this.username, this.password);\n    }\n    else {\n      this.usernameFormControl.hasError('required');\n      this.passwordFormControl.hasError('required');\n    }\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddUserComponent, {\n      width: '400px',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\">\n        <mat-label>Username</mat-label>\n        <input matInput [formControl]=\"usernameFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write your username here\" [(ngModel)]=\"username\">\n        <mat-hint>It looks okey!</mat-hint>\n        <mat-error *ngIf=\"usernameFormControl.hasError('required')\">\n            Username is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n    <br><br>\n    <mat-form-field class=\"example-full-width\">\n        <mat-label>Password</mat-label>\n        <input type=\"password\" matInput [formControl]=\"passwordFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write your password here\" [(ngModel)]=\"password\">\n        <mat-hint>It looks okey!</mat-hint>\n        <mat-error *ngIf=\"passwordFormControl.hasError('required')\">\n            Password is <strong>required</strong>\n        </mat-error>\n        <mat-error *ngIf=\"passwordFormControl.hasError('minlength')\">\n            Password min length is <strong>8 characters</strong>\n        </mat-error>\n    </mat-form-field>\n</form>\n<br>\n<button mat-raised-button (click)=\"authUser()\">Log-In <mat-icon>login</mat-icon></button>\n<br>\n<p>If you are not registered yet <button mat-button color=\"warn\" (click)=\"openDialog()\">click here!</button></p>\n","import { Injectable } from '@angular/core';\nimport * as $ from 'jquery';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActiveTablesService {\n\n  constructor() { }\n\n  getTableRecordsService(id: number, table: string, db: string, rules) {\n    if (rules.length == 0)\n      rules = JSON.stringify(['noRules']);\n    else  \n      rules = JSON.stringify(rules);\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    return $.post(\n      'get_records',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": db,\n        \"nameTable\": table,\n        \"rulesToApply\": rules\n      }\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Binary } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddColumnService {\n\n  constructor(private httpClient: HttpClient, private _snackBar: MatSnackBar) { }\n\n  addColumnService(dbName: string, tableName: string, columnName: string, idUser: number, aColumn: string, bColumn: string, operation: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/set_new_column',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": idUser,\n        \"dbName\": dbName,\n        \"tableName\": tableName,\n        \"columnName\": columnName,\n        \"aColumn\": aColumn,\n        \"bColumn\": bColumn,\n        \"operation\": operation\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  private checkStatus(code: number) {\n    switch (code) {\n      case 201:\n        return 'Column created successfully!';\n      case 202:\n        return 'Column already exists!';\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Binary } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DropColumnService {\n\n  constructor(private httpClient: HttpClient, private _snackBar: MatSnackBar) { }\n\n  dropColumnService(dbName: string, tableName: string, columnName: string, idUser: number) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/drop_column',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": idUser,\n        \"dbName\": dbName,\n        \"tableName\": tableName,\n        \"columnName\": columnName,\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  private checkStatus(code: number) {\n    switch (code) {\n      case 201:\n        return 'Column droped successfully!';\n      case 202:\n        return 'Column already not exists!';\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Binary } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TreeTableService {\n\n  constructor(private httpClient: HttpClient, private _snackBar: MatSnackBar) { }\n\n  addDbService(name: string, id: number) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/db_add',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": name\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  addTableService(file: File, id: number, nameDB: string, nameTable: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = function () {\n      $.post('/db_table_add', {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": nameDB,\n        \"nameTable\": nameTable,\n        \"fileTable\": reader.result\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n    };\n    reader.onerror = function (error) {\n      console.log('Error: ', error);\n    };\n  }\n\n  dropDbService(name: string, id: number) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/db_drop',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": name\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  dropDbTableService(name: string, id: number, db: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/db_table_drop',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": db,\n        \"nameTable\": name\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  getDbsService(id: number) {\n    const params = new HttpParams({ fromString: 'idUser=' + id });\n    return this.httpClient.get('/getDbs', { params });\n  }\n\n  getDbService(id: number, dbName: string) {\n    let params = new HttpParams()\n      .set('idUser', id.toString())\n      .set('nameDB', dbName);\n    this.httpClient.get('/getDb', { params, responseType: 'blob' }).subscribe(data => {\n      let blob = new Blob([data], { type: 'application/zip' });\n      let fileurl = window.URL.createObjectURL(blob);\n      let a = document.createElement('a');\n      document.body.appendChild(a);\n      a.setAttribute('style', 'display: none');\n      a.href = fileurl;\n      a.download = `${dbName}`;\n      a.click();\n      window.URL.revokeObjectURL(fileurl);\n      a.remove();\n    });\n  }\n\n  private checkStatus(code: number) {\n    switch (code) {\n      case 201:\n        return 'DB created successfully!';\n      case 202:\n        return 'DB droped successfully!';\n      case 203:\n        return 'Table created successfully!';\n      case 204:\n        return 'Table droped successfully!';\n      case 501:\n        return 'DB already exists!';\n      case 502:\n        return 'Table already exists!';\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private _snackBar: MatSnackBar) { }\n\n  public httpAuthUser(name: string, password: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let showSessionState = this.showSessionState;\n    let openSnackBar = this.openSnackBar;\n    let snackBar = this._snackBar;\n    $.post('/auth',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"name\": name,\n        \"password\": password\n      }, function (data) {\n        let message = showSessionState(data);\n        if (message != 'reload')\n          openSnackBar(message, snackBar);\n      });\n  }\n\n  public httpCreateUser(name: string, password: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let showSessionState = this.showSessionState;\n    let openSnackBar = this.openSnackBar;\n    let snackBar = this._snackBar;\n    $.post('/sign-in',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"name\": name,\n        \"password\": password\n      }, function (data) {\n        let message = showSessionState(data);\n        if (message != 'reload')\n          openSnackBar(message, snackBar);\n      });\n  }\n\n  private showSessionState(data: any) {\n    switch (data['id']) {\n      case 0:\n        return 'Username not found or password not match!';\n      case -1:\n        return 'Username already exists!';\n      default:\n        if (data['id'] > 0) {\n          document.cookie = `id=${data['id']}`;\n          location.reload();\n          return 'reload';\n        }\n        break;\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n","import { Component, OnInit, ViewChild, Output, EventEmitter, Input } from '@angular/core';\nimport { MatAccordion } from '@angular/material/expansion';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddDbComponent } from '../add-db/add-db.component';\nimport { TreeTableService } from '../services/tree-table.service';\nimport Swal from 'sweetalert2'\nimport { AddTableComponent } from '../add-table/add-table.component';\nimport { MatDrawer } from '@angular/material/sidenav';\n\n@Component({\n  selector: 'app-tree-table',\n  templateUrl: './tree-table.component.html',\n  styleUrls: ['./tree-table.component.css']\n})\nexport class TreeTableComponent implements OnInit {\n\n  @Input()\n  drawer: MatDrawer;\n  activeDB: string;\n  activeTable: string;\n  dbs: string[];\n  id: number;\n  isDropTable: boolean = false;\n\n  @Output() dbActiveEvent = new EventEmitter<string>();\n  @Output() tableActiveEvent = new EventEmitter<string>();\n  @ViewChild(MatAccordion) accordion: MatAccordion;\n\n  constructor(public dialog: MatDialog, public service: TreeTableService) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n    this.showDBs();\n  }\n\n  ngOnInit(): void { }\n\n  addDB() {\n    const dialogRef = this.dialog.open(AddDbComponent, {\n      width: '400px',\n    });\n    dialogRef.afterClosed().subscribe(() => this.showDBs());\n  }\n\n  addTable(db: string) {\n    const dialogRef = this.dialog.open(AddTableComponent, {\n      width: '400px',\n    });\n    dialogRef.componentInstance.db = db;\n    dialogRef.afterClosed().subscribe(() => this.showDBs());\n  }\n\n  dropDB(name: string) {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        this.service.dropDbService(name, this.id)\n        this.showDBs();\n        if (name == this.activeDB) {\n          this.isDropTable = false;\n          this.dbTableCheked('', '');\n          this.isDropTable = false;\n        }\n      }\n    });\n  }\n\n  dropTable(name: string, db: string) {\n    this.service.dropDbTableService(name, this.id, db);\n    if (name == this.activeTable)\n      this.dbTableCheked('', '');\n    this.showDBs();\n  }\n\n  downloadDB(db: string) {\n    this.service.getDbService(this.id, db);\n  }\n\n  showDBs() {\n    let service = this.service.getDbsService(this.id);\n    service.subscribe((data: any[]) => {\n      this.dbs = data['response'];\n    });\n  }\n\n  dbTableCheked(table_selected, db_selected) {\n    if (!this.isDropTable) {\n      this.isDropTable = true;\n      this.activeDB = db_selected;\n      this.activeTable = table_selected;\n      this.dbActiveEvent.emit(db_selected);\n      this.tableActiveEvent.emit(table_selected);\n    }\n    else\n      this.isDropTable = false;\n  }\n}\n","Here are your DB's <button mat-button color=\"primary\" (click)=\"addDB()\">add DB <mat-icon>\n        add_circle</mat-icon></button>\n<mat-divider></mat-divider>\n<mat-accordion class=\"example-headers-align\" multi *ngFor=\"let db of dbs\">\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{db[0]}}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <button mat-button class=\"example-action-buttons\" [matMenuTriggerFor]=\"menu\">\n            <mat-icon>more_vert</mat-icon> See options</button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"addTable(db[0])\" aria-label=\"Add table\">\n                <mat-icon>add_circle</mat-icon> Add table\n            </button>\n            <button mat-menu-item (click)=\"dropDB(db[0])\" aria-label=\"Drop DB\">\n                <mat-icon>delete_forever</mat-icon> Drop\n            </button>\n            <button mat-menu-item (click)=\"downloadDB(db[0])\" aria-label=\"Download DB\">\n                <mat-icon>get_app</mat-icon> Download\n            </button>\n        </mat-menu>\n        <mat-selection-list #dbs_selected [multiple]=\"false\">\n            <mat-list-option *ngFor=\"let table of db[1]\" [value]=\"table\"\n                (click)=\"drawer.toggle(); dbTableCheked(dbs_selected.selectedOptions.selected[0]?.value, db[0])\">\n                <span>\n                    {{table}}\n                    <button mat-icon-button color=\"warn\" (click)=\"dropTable(table, db[0])\" aria-label=\"Drop table\">\n                        <mat-icon>delete_forever</mat-icon>\n                    </button>\n                </span>\n            </mat-list-option>\n        </mat-selection-list>\n    </mat-expansion-panel>\n</mat-accordion>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}