{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/active-tables/active-tables.component.ts","webpack:///src/app/active-tables/active-tables.component.html","webpack:///src/app/add-column/add-column.component.ts","webpack:///src/app/add-column/add-column.component.html","webpack:///src/app/add-db/add-db.component.ts","webpack:///src/app/add-db/add-db.component.html","webpack:///src/app/add-rule/add-rule.component.ts","webpack:///src/app/add-rule/add-rule.component.html","webpack:///src/app/add-table/add-table.component.ts","webpack:///src/app/add-table/add-table.component.html","webpack:///src/app/add-user/add-user.component.ts","webpack:///src/app/add-user/add-user.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/drop-column/drop-column.component.ts","webpack:///src/app/drop-column/drop-column.component.html","webpack:///src/app/drop-rule/drop-rule.component.ts","webpack:///src/app/drop-rule/drop-rule.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/services/active-tables.service.ts","webpack:///src/app/services/add-column.service.ts","webpack:///src/app/services/drop-column.service.ts","webpack:///src/app/services/tree-table.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/tree-table/tree-table.component.ts","webpack:///src/app/tree-table/tree-table.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ActiveTablesComponent","service","dialog","_snackBar","activeTables","activeDb","displayedColumns","Array","lengthColumns","rules","list","document","cookie","split","iterator","item","trim","Number","parseInt","changes","dataSource","chargeDataOnWorkSpace","isCharging","getTableRecordsService","done","data","i","openSnackBar","pop","dialogRef","open","width","afterClosed","subscribe","undefined","push","message","duration","horizontalPosition","verticalPosition","selector","templateUrl","styleUrls","AddColumnComponent","matcher","MyErrorStateMatcher","nameAddColumn","nameAddColumnFormControl","required","firstSelectedAddColumn","firstSelectedAddColumnFormControl","secondSelectedAddColumn","secondSelectedAddColumnFormControl","operationSelectedAddColumn","operationSelectedAddColumnFormControl","columns","idUser","dbName","db","tableName","table","addColumnService","onNoClick","hasError","close","addColumn","control","form","isSubmitted","submitted","invalid","dirty","touched","AddDbComponent","name","nameFormControl","length","addDbService","addDB","AddRuleComponent","columnToApply","columnToApplyFormControl","ruleSelectedAddRule","ruleSelectedAddRuleFormControl","firstValueRule","firstValueRuleFormControl","secondValueRule","secondValueRuleFormControl","rule","column","fValue","sValue","addRule","AddTableComponent","files","file","addTableService","handleFileInput","addTable","AddUserComponent","username","password","passwordConfirm","usernameFormControl","minLength","passwordFormControl","passwordConfirmFormControl","httpCreateUser","addUser","routes","AppRoutingModule","forRoot","imports","AppComponent","title","isLoged","checkLoged","snackBar","$event","AppModule","declarations","providers","bootstrap","DropColumnComponent","selectedDropColumn","selectedDropColumnFormControl","dropColumnService","dropColumn","DropRuleComponent","rulesTrated","ruleToDrop","ruleToDropFormControl","text","rulesFilter","dropRule","LoginComponent","httpAuthUser","authUser","openDialog","ActiveTablesService","JSON","stringify","getElementsByName","providedIn","AddColumnService","httpClient","columnName","aColumn","bColumn","operation","checkStatus","DropColumnService","TreeTableService","nameDB","nameTable","reader","FileReader","readAsDataURL","onload","result","onerror","error","console","log","params","fromString","get","set","toString","responseType","blob","Blob","type","fileurl","window","URL","createObjectURL","a","createElement","body","appendChild","setAttribute","href","download","click","revokeObjectURL","remove","UserService","showSessionState","location","reload","drawer","TreeTableComponent","isDropTable","dbActiveEvent","tableActiveEvent","showDBs","componentInstance","fire","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","value","dropDbService","activeDB","dbTableCheked","dropDbTableService","activeTable","getDbService","getDbsService","dbs","table_selected","db_selected","emit","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit, Input, OnChanges, SimpleChanges, Inject } from '@angular/core';\nimport { ActiveTablesService } from '../services/active-tables.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AddColumnComponent } from '../add-column/add-column.component';\nimport { DropColumnComponent } from '../drop-column/drop-column.component';\nimport { AddRuleComponent } from '../add-rule/add-rule.component';\nimport { DropRuleComponent } from '../drop-rule/drop-rule.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n@Component({\n  selector: 'app-active-tables',\n  templateUrl: './active-tables.component.html',\n  styleUrls: ['./active-tables.component.css']\n})\nexport class ActiveTablesComponent implements OnInit, OnChanges {\n\n  @Input()\n  activeTables: string = '';\n  @Input()\n  activeDb: string = '';\n  isCharging: boolean;\n  id: number;\n  displayedColumns = Array();\n  lengthColumns = Array();\n  dataSource: any[];\n  rules: any[] = [];\n\n  constructor(private service: ActiveTablesService, public dialog: MatDialog, private _snackBar: MatSnackBar) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n  }\n\n  ngOnInit(): void { }\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.activeTables == '' || this.activeDb == '') {\n      this.rules = [];\n      this.dataSource = [];\n      this.displayedColumns = Array();\n    }\n    else\n      this.chargeDataOnWorkSpace();\n  }\n\n  chargeDataOnWorkSpace() {\n    this.isCharging = true;\n    if (this.activeTables != '') {\n      this.service.getTableRecordsService(this.id, this.activeTables, this.activeDb, this.rules).done(\n        (data: any) => {\n          this.displayedColumns = new Array();\n          let i = 0;\n          for (const item of data['columns']) {\n            this.lengthColumns[item] = i;\n            i++;\n          }\n          this.displayedColumns = data['columns'];\n          this.dataSource = data['data'];\n          this.isCharging = false;\n          if (data['state'] == 505) {\n            this.openSnackBar('Values of the rule was incorrect!');\n            this.rules.pop();\n          }\n          else\n            this.openSnackBar('Data succesfully loaded!');\n        }\n      );\n    }\n  }\n\n  openAddColumnDialog(): void {\n    const dialogRef = this.dialog.open(AddColumnComponent, {\n      width: '350px',\n      data: {\n        \"columns\": this.displayedColumns,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  openDropColumnDialog(): void {\n    const dialogRef = this.dialog.open(DropColumnComponent, {\n      width: '350px',\n      data: {\n        \"columns\": this.displayedColumns,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  openAddRuleDialog(): void {\n    const dialogRef = this.dialog.open(AddRuleComponent, {\n      width: '350px',\n      data: {\n        \"columns\": this.displayedColumns,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      if (data != undefined)\n        this.rules.push(data);\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  openDropRuleDialog(): void {\n    const dialogRef = this.dialog.open(DropRuleComponent, {\n      width: '350px',\n      data: {\n        \"rules\": this.rules,\n        \"id\": this.id,\n        \"db\": this.activeDb,\n        \"table\": this.activeTables\n      }\n    }).afterClosed().subscribe(data => {\n      if (data != undefined)\n        this.rules = data;\n      this.chargeDataOnWorkSpace();\n    });\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}","<br>\n<div *ngIf=\"activeTables\">\n    <div class=\"example-button-row\" *ngIf=\"activeTables\">\n        <button mat-stroked-button color=\"warn\" (click)=\"openAddColumnDialog()\">Add column <mat-icon>\n                add_circle_outline\n            </mat-icon></button>\n        <button mat-stroked-button color=\"warn\" (click)=\"openDropColumnDialog()\">Drop column <mat-icon>\n                delete_outline\n            </mat-icon></button>\n        <button mat-stroked-button color=\"warn\" (click)=\"openAddRuleDialog()\">Add rule <mat-icon>\n                add_circle_outline\n            </mat-icon></button>\n        <button mat-stroked-button color=\"warn\" (click)=\"openDropRuleDialog()\">Drop rule <mat-icon>\n                delete_outline\n            </mat-icon></button>\n    </div>\n    <br>\n    <div class=\"example-container mat-elevation-z8\">\n        <table mat-table [dataSource]=\"dataSource\" *ngIf=\"dataSource\">\n            <div *ngFor=\"let item of displayedColumns\">\n                <ng-container matColumnDef={{item}}>\n                    <th mat-header-cell *matHeaderCellDef> {{item}} </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element[lengthColumns[item]]}} </td>\n                </ng-container>\n            </div>\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n    </div>\n    <div *ngIf=\"isCharging\" class=\"loading\">\n        <mat-spinner></mat-spinner>\n    </div>\n</div>","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AddColumnService } from '../services/add-column.service';\n\n@Component({\n  selector: 'app-add-column',\n  templateUrl: './add-column.component.html',\n  styleUrls: ['./add-column.component.css']\n})\nexport class AddColumnComponent implements OnInit {\n\n  displayedColumns;\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n  nameAddColumn: string = '';\n  nameAddColumnFormControl = new FormControl('', [Validators.required]);\n  firstSelectedAddColumn: string = '';\n  firstSelectedAddColumnFormControl = new FormControl('', [Validators.required]);\n  secondSelectedAddColumn: string = '';\n  secondSelectedAddColumnFormControl = new FormControl('', [Validators.required]);\n  operationSelectedAddColumn: string = '';\n  operationSelectedAddColumnFormControl = new FormControl('', [Validators.required]);\n\n  constructor(public dialogRef: MatDialogRef<AddColumnComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private service: AddColumnService) {\n    this.displayedColumns = data.columns;\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  addColumn(): void {\n    if (this.nameAddColumn != '')\n      if (this.firstSelectedAddColumn != '')\n        if (this.secondSelectedAddColumn != '')\n          if (this.operationSelectedAddColumn != '') {\n            this.service.addColumnService(this.dbName, this.tableName, this.nameAddColumn, this.idUser,\n              this.firstSelectedAddColumn, this.secondSelectedAddColumn, this.operationSelectedAddColumn);\n            this.onNoClick();\n          }\n          else\n            this.nameAddColumnFormControl.hasError('required')\n        else\n          this.firstSelectedAddColumnFormControl.hasError('required')\n      else\n        this.secondSelectedAddColumnFormControl.hasError('required')\n    else\n      this.operationSelectedAddColumnFormControl.hasError('required')\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close('ok');\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Add a new column!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\">\n        <mat-label>New column name</mat-label>\n        <input matInput [formControl]=\"nameAddColumnFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write here your new column name\" [(ngModel)]=\"nameAddColumn\">\n        <mat-error *ngIf=\"nameAddColumnFormControl.hasError('required')\">\n            Name is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a column</mat-label>\n        <mat-select [(value)]=\"firstSelectedAddColumn\" [formControl]=\"firstSelectedAddColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"firstSelectedAddColumnFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select an operation</mat-label>\n        <mat-select [(value)]=\"operationSelectedAddColumn\" [formControl]=\"operationSelectedAddColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option value=\"+\">+</mat-option>\n            <mat-option value=\"-\">-</mat-option>\n            <mat-option value=\"*\">*</mat-option>\n            <mat-option value=\"/\">/</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"operationSelectedAddColumnFormControl.hasError('required')\">\n            Operation select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select another column</mat-label>\n        <mat-select [(value)]=\"secondSelectedAddColumn\" [formControl]=\"secondSelectedAddColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"secondSelectedAddColumnFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"addColumn()\">\n            Add column <mat-icon>add_circle_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators, FormGroupDirective, NgForm } from '@angular/forms';\nimport { TreeTableService } from '../services/tree-table.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-add-db',\n  templateUrl: './add-db.component.html',\n  styleUrls: ['./add-db.component.css']\n})\nexport class AddDbComponent implements OnInit {\n\n  id: number;\n  name: string = '';\n  nameFormControl = new FormControl('', [Validators.required]);\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: TreeTableService, public dialogRef: MatDialogRef<AddDbComponent>, private _snackBar: MatSnackBar) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  addDB() {\n    if (this.name != '')\n      if (this.name.split(\"/\").length > 1)\n        this.name = '';\n      else {\n        this.service.addDbService(this.name, this.id);\n        this.onNoClick();\n      }\n    else\n      this.nameFormControl.hasError('required');\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h1 mat-dialog-title>Add a new DB!</h1>\n<div mat-dialog-content>\n    <form class=\"example-form\">\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>DB name</mat-label>\n            <input matInput [formControl]=\"nameFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Write your DB name here\" [(ngModel)]=\"name\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"nameFormControl.hasError('required')\">\n                DB name is <strong>required</strong>\n            </mat-error>\n        </mat-form-field>\n    </form>\n</div>\n<br>\n<div class=\"text-center\">\n    <button mat-raised-button color=\"accent\" (click)=\"onNoClick()\">No Thanks <mat-icon>close</mat-icon></button>\n    <button mat-raised-button color=\"primary\" (click)=\"addDB()\">Add <mat-icon>add</mat-icon></button>\n</div>","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-add-rule',\n  templateUrl: './add-rule.component.html',\n  styleUrls: ['./add-rule.component.css']\n})\nexport class AddRuleComponent implements OnInit {\n\n  displayedColumns;\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n\n  rule: { column: string, rule: string, fValue: string, sValue: string };\n  columnToApply: string = '';\n  columnToApplyFormControl = new FormControl('', [Validators.required]);\n  ruleSelectedAddRule: string = '';\n  ruleSelectedAddRuleFormControl = new FormControl('', [Validators.required]);\n  firstValueRule: string = '';\n  firstValueRuleFormControl = new FormControl('', [Validators.required]);\n  secondValueRule: string = '';\n  secondValueRuleFormControl = new FormControl('', [Validators.required]);\n\n  constructor(public dialogRef: MatDialogRef<AddRuleComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private _snackBar: MatSnackBar) {\n    this.displayedColumns = data.columns;\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  addRule(): void {\n    if (this.columnToApply != '')\n      if (this.ruleSelectedAddRule != '')\n        if (this.firstValueRule != '') {\n          if (this.ruleSelectedAddRule == '<>' && this.secondValueRule == '')\n            this.secondValueRuleFormControl.hasError('required');\n          else {\n            this.rule = {\n              column: this.columnToApply,\n              rule: this.ruleSelectedAddRule,\n              fValue: this.firstValueRule,\n              sValue: this.secondValueRule\n            }\n            this.openSnackBar('Rule added!');\n            this.onNoClick();\n          }\n        }\n        else\n          this.firstValueRuleFormControl.hasError('required');\n      else\n        this.ruleSelectedAddRuleFormControl.hasError('required');\n    else\n      this.columnToApplyFormControl.hasError('required');\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(this.rule);\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Add a new rule!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a column</mat-label>\n        <mat-select [(value)]=\"columnToApply\" [formControl]=\"columnToApplyFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"columnToApplyFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a rule</mat-label>\n        <mat-select [(value)]=\"ruleSelectedAddRule\" [formControl]=\"ruleSelectedAddRuleFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option value=\"<\">< (start with)</mat-option>\n            <mat-option value=\">\">> (end with)</mat-option>\n            <mat-option value=\"<=\"><= (not contains)</mat-option>\n            <mat-option value=\">=\">>= (contains)</mat-option>\n            <mat-option value=\"=\">=</mat-option>\n            <mat-option value=\"!=\">!=</mat-option>\n            <mat-option value=\"<>\">Between</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"ruleSelectedAddRuleFormControl.hasError('required')\">\n            Rule select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n    \n    <mat-form-field class=\"example-full-width\">\n        <mat-label>Value for the rule</mat-label>\n        <input matInput [formControl]=\"firstValueRuleFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write here the value of the rule\" [(ngModel)]=\"firstValueRule\">\n        <mat-error *ngIf=\"firstValueRuleFormControl.hasError('required')\">\n            Value is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <ng-container *ngIf=\"ruleSelectedAddRule == '<>'\">\n\n        <br><br>\n        \n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Value for the rule</mat-label>\n            <input matInput [formControl]=\"secondValueRuleFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write here your new column name\" [(ngModel)]=\"secondValueRule\">\n            <mat-error *ngIf=\"secondValueRuleFormControl.hasError('required')\">\n                Value is <strong>required</strong>\n            </mat-error>\n        </mat-form-field>\n    </ng-container>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"addRule()\">\n            Add rule <mat-icon>add_circle_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, Validators, FormGroupDirective, NgForm } from '@angular/forms';\nimport { TreeTableService } from '../services/tree-table.service';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ErrorStateMatcher } from '@angular/material/core';\n\n@Component({\n  selector: 'app-add-table',\n  templateUrl: './add-table.component.html',\n  styleUrls: ['./add-table.component.css']\n})\nexport class AddTableComponent implements OnInit {\n\n  id: number;\n  db: string;\n  file: File;\n  name: string;\n  nameFormControl = new FormControl('', [Validators.required]);\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: TreeTableService, public dialogRef: MatDialogRef<AddTableComponent>, private _snackBar: MatSnackBar) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  handleFileInput(files: FileList) {\n    this.file = files.item(0);\n    this.name = files.item(0).name;\n  }\n\n  addTable() {\n    if (this.file != null) {\n      this.service.addTableService(this.file, this.id, this.db, this.name);\n      this.onNoClick();\n    }\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h1 mat-dialog-title>Add a new table!</h1>\n<div mat-dialog-content>\n    <form class=\"example-form\">\n        <label>Upload file</label>\n        <input type=\"file\" class=\"example-full-width\" accept=\".csv\" (change)=\"handleFileInput($event.target.files)\">\n    </form>\n</div>\n<br>\n<div class=\"text-center\">\n    <button mat-raised-button color=\"accent\" (click)=\"onNoClick()\">No Thanks <mat-icon>close</mat-icon></button>\n    <button mat-raised-button color=\"primary\" (click)=\"addTable()\">Add <mat-icon>add</mat-icon></button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  username: string = '';\n  password: string = '';\n  passwordConfirm: string = '';\n\n  usernameFormControl = new FormControl('', [Validators.required, Validators.minLength(8)]);\n  passwordFormControl = new FormControl('', [Validators.required, Validators.minLength(8)]);\n  passwordConfirmFormControl = new FormControl('', [Validators.required, Validators.minLength(8)]);\n\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: UserService, public dialogRef: MatDialogRef<AddUserComponent>, private _snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  addUser() {\n    if (this.password == this.passwordConfirm) {\n      if (this.username.length >= 8 && this.password.length >= 8) {\n        this.service.httpCreateUser(this.username, this.password);\n        this.onNoClick()\n      }\n      else {\n        this.usernameFormControl.hasError('required');\n        this.passwordFormControl.hasError('required');\n      }\n    } else {\n      this.openSnackBar('Password not match!');\n      this.passwordFormControl.hasError('required');\n      this.passwordConfirmFormControl.hasError('required');\n    }\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h1 mat-dialog-title>Register you here!</h1>\n<div mat-dialog-content>\n    <form class=\"example-form\">\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Username</mat-label>\n            <input matInput [formControl]=\"usernameFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Write your username here\" [(ngModel)]=\"username\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"usernameFormControl.hasError('required')\">\n                Username is <strong>required</strong>\n            </mat-error>\n            <mat-error *ngIf=\"usernameFormControl.hasError('minlength')\">\n                Username min length is <strong>8 characters</strong>\n            </mat-error>\n        </mat-form-field>\n        <br><br>\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Password</mat-label>\n            <input type=\"password\" matInput [formControl]=\"passwordFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Write your password here\" [(ngModel)]=\"password\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"passwordFormControl.hasError('required')\">\n                Password is <strong>required</strong>\n            </mat-error>\n            <mat-error *ngIf=\"passwordFormControl.hasError('minlength')\">\n                Password min length is <strong>8 characters</strong>\n            </mat-error>\n        </mat-form-field>\n        <br><br>\n        <mat-form-field class=\"example-full-width\">\n            <mat-label>Confirm password</mat-label>\n            <input type=\"password\" matInput [formControl]=\"passwordConfirmFormControl\" [errorStateMatcher]=\"matcher\"\n                placeholder=\"Rewrite your password here\" [(ngModel)]=\"passwordConfirm\">\n            <mat-hint>It looks okey!</mat-hint>\n            <mat-error *ngIf=\"passwordConfirmFormControl.hasError('required')\">\n                Password not match\n            </mat-error>\n            <mat-error *ngIf=\"passwordConfirmFormControl.hasError('minlength')\">\n                Password confirm min length is <strong>8 characters</strong>\n            </mat-error>\n        </mat-form-field>\n    </form>\n</div>\n<br>\n<div  class=\"text-center\">\n    <button mat-raised-button color=\"accent\" (click)=\"onNoClick()\">No Thanks <mat-icon>close</mat-icon></button>\n    <button mat-raised-button color=\"primary\" (click)=\"addUser()\">Sign-in <mat-icon>how_to_reg</mat-icon></button>\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Ang';\n\n  isLoged: boolean = false;\n  id: number = null;\n  activeTables: string = '';\n  activeDb: string = '';\n\n  constructor(private _snackBar: MatSnackBar) {\n    this.checkLoged()\n  }\n\n  checkLoged() {\n    if (this.isLoged == false) {\n      let list = document.cookie.split(';');\n      for (const iterator of list) {\n        let item = iterator.split('=');\n        if (item[0].trim() == 'id')\n          if (item[1] != '')\n            this.id = Number.parseInt(item[1]);\n      }\n      if (this.id != null) {\n        this.isLoged = true;\n        this.openSnackBar('Welcome you are logged!', this._snackBar);\n      }\n      else\n        this.isLoged = false;\n    }\n  }\n\n  logOut() {\n    document.cookie = 'id=';\n    this.isLoged = false;\n    this.id = null;\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n  receiveTableActive($event) {\n    this.activeTables = $event;\n  }\n  \n  receiveDbActive($event) {\n    this.activeDb = $event;\n  }\n\n}\n","<mat-drawer-container class=\"example-container\" [hasBackdrop]=\"true\">\n  <mat-drawer #drawer [mode]=\"true\">\n    <div *ngIf=\"isLoged==true;else notLoggedSidebar\">\n      <p>\n        You are logged! <button mat-button color=\"warn\" (click)=\"logOut()\">Log-out <mat-icon>exit_to_app</mat-icon>\n        </button>\n      </p>\n      <app-tree-table (dbActiveEvent)=\"receiveDbActive($event)\" (tableActiveEvent)=\"receiveTableActive($event)\" [drawer]=\"drawer\">\n      </app-tree-table>\n    </div>\n    <ng-template #notLoggedSidebar>\n      <h3>\n        <mat-icon style=\"font-size: 48px;\">error</mat-icon> You need to be logged to see your DB's!\n      </h3>\n    </ng-template>\n  </mat-drawer>\n  <mat-drawer-content>\n    <button mat-raised-button class=\"button-menu\" (click)=\"drawer.toggle(); checkLoged();\">\n      <mat-icon>menu_open</mat-icon>\n    </button>\n    <ng-container *ngIf=\"(!activeTables) && isLoged\"> \n      <br>\n      <br>\n      <mat-icon style=\"font-size: 48px;\">reply</mat-icon>\n      <h1>No table selected!</h1>\n      <h2>Search on the sidebar to add or view some item!</h2>\n    </ng-container>\n    <div *ngIf=\"isLoged==true;else notLoggedContent\">\n      <app-active-tables [activeTables]=\"activeTables\" [activeDb]=\"activeDb\"></app-active-tables>\n    </div>\n    <ng-template #notLoggedContent>\n      <br>\n      <app-login class=\"login-alignement\"></app-login>\n    </ng-template>\n  </mat-drawer-content>\n</mat-drawer-container>\n\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog'\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatListModule } from '@angular/material/list';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatMenuModule } from '@angular/material/menu';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LoginComponent } from './login/login.component';\nimport { AddUserComponent } from './add-user/add-user.component';\nimport { TreeTableComponent } from './tree-table/tree-table.component';\nimport { AddDbComponent } from './add-db/add-db.component';\nimport { AddTableComponent } from './add-table/add-table.component';\nimport { ActiveTablesComponent } from './active-tables/active-tables.component';\nimport { AddColumnComponent } from './add-column/add-column.component';\nimport { DropColumnComponent } from './drop-column/drop-column.component';\nimport { DropRuleComponent } from './drop-rule/drop-rule.component';\nimport { AddRuleComponent } from './add-rule/add-rule.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    AddUserComponent,\n    TreeTableComponent,\n    AddDbComponent,\n    AddTableComponent,\n    ActiveTablesComponent,\n    AddColumnComponent,\n    DropColumnComponent,\n    DropRuleComponent,\n    AddRuleComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatSidenavModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatCheckboxModule,\n    MatExpansionModule,\n    MatListModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatProgressSpinnerModule,\n    MatTabsModule,\n    MatMenuModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DropColumnService } from '../services/drop-column.service';\n\n@Component({\n  selector: 'app-drop-column',\n  templateUrl: './drop-column.component.html',\n  styleUrls: ['./drop-column.component.css']\n})\nexport class DropColumnComponent implements OnInit {\n\n  displayedColumns;\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n  selectedDropColumn: string = '';\n  selectedDropColumnFormControl = new FormControl('', [Validators.required],);\n\n  constructor(public dialogRef: MatDialogRef<DropColumnComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private service: DropColumnService) {\n    this.displayedColumns = data.columns;\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  dropColumn(): void {\n    if (this.selectedDropColumn != '') {\n      this.service.dropColumnService(this.dbName, this.tableName, this.selectedDropColumn, this.idUser);\n      this.onNoClick();\n    }\n    else\n      this.selectedDropColumnFormControl.hasError('required')\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(this.selectedDropColumn);\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Drop an existing column!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a column</mat-label>\n        <mat-select [(value)]=\"selectedDropColumn\" [formControl]=\"selectedDropColumnFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of displayedColumns\" value=\"{{item}}\">{{item}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"selectedDropColumnFormControl.hasError('required')\">\n            Column select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"dropColumn()\">\n            Drop column <mat-icon>delete_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit, Input, Inject } from '@angular/core';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-drop-rule',\n  templateUrl: './drop-rule.component.html',\n  styleUrls: ['./drop-rule.component.css']\n})\nexport class DropRuleComponent implements OnInit {\n  rules: any[] = [];\n  rulesTrated: any[] = [];\n  idUser;\n  dbName;\n  tableName;\n  matcher = new MyErrorStateMatcher();\n\n  ruleToDrop: number = -1;\n  ruleToDropFormControl = new FormControl('', [Validators.required]);\n\n  constructor(public dialogRef: MatDialogRef<DropRuleComponent>,\n    @Inject(MAT_DIALOG_DATA) public data, private _snackBar: MatSnackBar) {\n    let i: number = 0;\n    this.rules = data.rules;\n    if (data.rules.length != 0) {\n      for (const item of data.rules) {\n        if (item['rule'] == '<>')\n          this.rulesTrated.push({\n            id: i,\n            text: item.column + ' between ' + item.fValue + ' to ' + item.sValue\n          });\n        else\n          this.rulesTrated.push({\n            id: i,\n            text: item.column + ' ' + item.rule + ' ' + item.fValue\n          });\n        i++;\n      }\n    }\n    this.idUser = data.id;\n    this.dbName = data.db;\n    this.tableName = data.table;\n  }\n\n  ngOnInit(): void {\n  }\n\n  dropRule(): void {\n    if (this.ruleToDrop != -1) {\n      let i = 0;\n      let rulesFilter: any[] = [];\n      for (const item of this.rules) {\n        if (i != this.ruleToDrop)\n          rulesFilter.push(item);\n        i++;\n      }\n      this.rules = rulesFilter;\n      this.openSnackBar('Rule droped!');\n      this.onNoClick();\n    }\n    else\n      this.ruleToDropFormControl.hasError('required');\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close(this.rules);\n  }\n\n  private openSnackBar(message: string) {\n    this._snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<h3>Drop an existing rule!</h3>\n<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n        <mat-label>Select a rule</mat-label>\n        <mat-select [(value)]=\"ruleToDrop\" [formControl]=\"ruleToDropFormControl\"\n            [errorStateMatcher]=\"matcher\">\n            <mat-option *ngFor=\"let item of rulesTrated\" value=\"{{item.id}}\">{{item.text}}</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"ruleToDropFormControl.hasError('required')\">\n            Rule select is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n\n    <br><br>\n\n    <div class=\"text-center\">\n        <button mat-flat-button (click)=\"onNoClick()\">No Thanks</button>\n        <button mat-flat-button color=\"primary\" (click)=\"dropRule()\">\n            Drop rule <mat-icon>delete_outline</mat-icon></button>\n    </div>\n</form>","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { FormGroupDirective, FormControl, NgForm, Validators } from '@angular/forms';\nimport { AddUserComponent } from '../add-user/add-user.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  username: string = '';\n  password: string = '';\n  usernameFormControl = new FormControl('', [\n    Validators.required,\n    Validators.minLength(8)\n  ]);\n  passwordFormControl = new FormControl('', [\n    Validators.required,\n    Validators.minLength(8)\n  ]);\n\n  matcher = new MyErrorStateMatcher();\n\n  constructor(private service: UserService, public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n  }\n\n  authUser() {\n    if (this.username.length >= 8 && this.password.length >= 8) {\n      this.service.httpAuthUser(this.username, this.password);\n    }\n    else {\n      this.usernameFormControl.hasError('required');\n      this.passwordFormControl.hasError('required');\n    }\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(AddUserComponent, {\n      width: '400px',\n    });\n  }\n\n}\n\n/** Error when invalid control is dirty, touched, or submitted. */\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n","<form class=\"example-form\">\n    <mat-form-field class=\"example-full-width\">\n        <mat-label>Username</mat-label>\n        <input matInput [formControl]=\"usernameFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write your username here\" [(ngModel)]=\"username\">\n        <mat-hint>It looks okey!</mat-hint>\n        <mat-error *ngIf=\"usernameFormControl.hasError('required')\">\n            Username is <strong>required</strong>\n        </mat-error>\n    </mat-form-field>\n    <br><br>\n    <mat-form-field class=\"example-full-width\">\n        <mat-label>Password</mat-label>\n        <input type=\"password\" matInput [formControl]=\"passwordFormControl\" [errorStateMatcher]=\"matcher\"\n            placeholder=\"Write your password here\" [(ngModel)]=\"password\">\n        <mat-hint>It looks okey!</mat-hint>\n        <mat-error *ngIf=\"passwordFormControl.hasError('required')\">\n            Password is <strong>required</strong>\n        </mat-error>\n        <mat-error *ngIf=\"passwordFormControl.hasError('minlength')\">\n            Password min length is <strong>8 characters</strong>\n        </mat-error>\n    </mat-form-field>\n</form>\n<br>\n<button mat-raised-button (click)=\"authUser()\">Log-In <mat-icon>login</mat-icon></button>\n<br>\n<p>If you are not registered yet <button mat-button color=\"warn\" (click)=\"openDialog()\">click here!</button></p>\n","import { Injectable } from '@angular/core';\nimport * as $ from 'jquery';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActiveTablesService {\n\n  constructor() { }\n\n  getTableRecordsService(id: number, table: string, db: string, rules) {\n    if (rules.length == 0)\n      rules = JSON.stringify(['noRules']);\n    else  \n      rules = JSON.stringify(rules);\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    return $.post(\n      'get_records',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": db,\n        \"nameTable\": table,\n        \"rulesToApply\": rules\n      }\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Binary } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AddColumnService {\n\n  constructor(private httpClient: HttpClient, private _snackBar: MatSnackBar) { }\n\n  addColumnService(dbName: string, tableName: string, columnName: string, idUser: number, aColumn: string, bColumn: string, operation: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/set_new_column',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": idUser,\n        \"dbName\": dbName,\n        \"tableName\": tableName,\n        \"columnName\": columnName,\n        \"aColumn\": aColumn,\n        \"bColumn\": bColumn,\n        \"operation\": operation\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  private checkStatus(code: number) {\n    switch (code) {\n      case 201:\n        return 'Column created successfully!';\n      case 202:\n        return 'Column already exists!';\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Binary } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DropColumnService {\n\n  constructor(private httpClient: HttpClient, private _snackBar: MatSnackBar) { }\n\n  dropColumnService(dbName: string, tableName: string, columnName: string, idUser: number) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/drop_column',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": idUser,\n        \"dbName\": dbName,\n        \"tableName\": tableName,\n        \"columnName\": columnName,\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  private checkStatus(code: number) {\n    switch (code) {\n      case 201:\n        return 'Column droped successfully!';\n      case 202:\n        return 'Column already not exists!';\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Binary } from '@angular/compiler';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TreeTableService {\n\n  constructor(private httpClient: HttpClient, private _snackBar: MatSnackBar) { }\n\n  addDbService(name: string, id: number) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/db_add',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": name\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  addTableService(file: File, id: number, nameDB: string, nameTable: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = function () {\n      $.post('/db_table_add', {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": nameDB,\n        \"nameTable\": nameTable,\n        \"fileTable\": reader.result\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n    };\n    reader.onerror = function (error) {\n      console.log('Error: ', error);\n    };\n  }\n\n  dropDbService(name: string, id: number) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/db_drop',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": name\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  dropDbTableService(name: string, id: number, db: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let openSnackBar = this.openSnackBar;\n    let checkStatus = this.checkStatus;\n    let snackBar = this._snackBar;\n    $.post('/db_table_drop',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"idUser\": id,\n        \"nameDB\": db,\n        \"nameTable\": name\n      }, function (data) {\n        let message = checkStatus(data['response']);\n        openSnackBar(message, snackBar);\n      });\n  }\n\n  getDbsService(id: number) {\n    const params = new HttpParams({ fromString: 'idUser=' + id });\n    return this.httpClient.get('/getDbs', { params });\n  }\n\n  getDbService(id: number, dbName: string) {\n    let params = new HttpParams()\n      .set('idUser', id.toString())\n      .set('nameDB', dbName);\n    this.httpClient.get('/getDb', { params, responseType: 'blob' }).subscribe(data => {\n      let blob = new Blob([data], { type: 'application/zip' });\n      let fileurl = window.URL.createObjectURL(blob);\n      let a = document.createElement('a');\n      document.body.appendChild(a);\n      a.setAttribute('style', 'display: none');\n      a.href = fileurl;\n      a.download = `${dbName}`;\n      a.click();\n      window.URL.revokeObjectURL(fileurl);\n      a.remove();\n    });\n  }\n\n  private checkStatus(code: number) {\n    switch (code) {\n      case 201:\n        return 'DB created successfully!';\n      case 202:\n        return 'DB droped successfully!';\n      case 203:\n        return 'Table created successfully!';\n      case 204:\n        return 'Table droped successfully!';\n      case 501:\n        return 'DB already exists!';\n      case 502:\n        return 'Table already exists!';\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHandler, HttpRequest, HttpParams, HttpHeaders } from '@angular/common/http';\nimport * as $ from 'jquery';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private _snackBar: MatSnackBar) { }\n\n  public httpAuthUser(name: string, password: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let showSessionState = this.showSessionState;\n    let openSnackBar = this.openSnackBar;\n    let snackBar = this._snackBar;\n    $.post('/auth',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"name\": name,\n        \"password\": password\n      }, function (data) {\n        let message = showSessionState(data);\n        if (message != 'reload')\n          openSnackBar(message, snackBar);\n      });\n  }\n\n  public httpCreateUser(name: string, password: string) {\n    let cookie = document.getElementsByName('csrfmiddlewaretoken')[0];\n    let showSessionState = this.showSessionState;\n    let openSnackBar = this.openSnackBar;\n    let snackBar = this._snackBar;\n    $.post('/sign-in',\n      {\n        \"csrfmiddlewaretoken\": cookie['value'],\n        \"name\": name,\n        \"password\": password\n      }, function (data) {\n        let message = showSessionState(data);\n        if (message != 'reload')\n          openSnackBar(message, snackBar);\n      });\n  }\n\n  private showSessionState(data: any) {\n    switch (data['id']) {\n      case 0:\n        return 'Username not found or password not match!';\n      case -1:\n        return 'Username already exists!';\n      default:\n        if (data['id'] > 0) {\n          document.cookie = `id=${data['id']}`;\n          location.reload();\n          return 'reload';\n        }\n        break;\n    }\n  }\n\n  private openSnackBar(message: string, snackBar: MatSnackBar) {\n    snackBar.open(message, 'X', {\n      duration: 3000,\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n}\n","import { Component, OnInit, ViewChild, Output, EventEmitter, Input } from '@angular/core';\nimport { MatAccordion } from '@angular/material/expansion';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddDbComponent } from '../add-db/add-db.component';\nimport { TreeTableService } from '../services/tree-table.service';\nimport Swal from 'sweetalert2'\nimport { AddTableComponent } from '../add-table/add-table.component';\nimport { MatDrawer } from '@angular/material/sidenav';\n\n@Component({\n  selector: 'app-tree-table',\n  templateUrl: './tree-table.component.html',\n  styleUrls: ['./tree-table.component.css']\n})\nexport class TreeTableComponent implements OnInit {\n\n  @Input()\n  drawer: MatDrawer;\n  activeDB: string;\n  activeTable: string;\n  dbs: string[];\n  id: number;\n  isDropTable: boolean = false;\n\n  @Output() dbActiveEvent = new EventEmitter<string>();\n  @Output() tableActiveEvent = new EventEmitter<string>();\n  @ViewChild(MatAccordion) accordion: MatAccordion;\n\n  constructor(public dialog: MatDialog, public service: TreeTableService) {\n    let list = document.cookie.split(';');\n    for (const iterator of list) {\n      let item = iterator.split('=');\n      if (item[0].trim() == 'id') {\n        this.id = Number.parseInt(item[1]);\n      }\n    }\n    this.showDBs();\n  }\n\n  ngOnInit(): void { }\n\n  addDB() {\n    const dialogRef = this.dialog.open(AddDbComponent, {\n      width: '400px',\n    });\n    dialogRef.afterClosed().subscribe(() => this.showDBs());\n  }\n\n  addTable(db: string) {\n    const dialogRef = this.dialog.open(AddTableComponent, {\n      width: '400px',\n    });\n    dialogRef.componentInstance.db = db;\n    dialogRef.afterClosed().subscribe(() => this.showDBs());\n  }\n\n  dropDB(name: string) {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        this.service.dropDbService(name, this.id)\n        this.showDBs();\n        if (name == this.activeDB) {\n          this.isDropTable = false;\n          this.dbTableCheked('', '');\n          this.isDropTable = false;\n        }\n      }\n    });\n  }\n\n  dropTable(name: string, db: string) {\n    this.service.dropDbTableService(name, this.id, db);\n    if (name == this.activeTable)\n      this.dbTableCheked('', '');\n    this.showDBs();\n  }\n\n  downloadDB(db: string) {\n    this.service.getDbService(this.id, db);\n  }\n\n  showDBs() {\n    let service = this.service.getDbsService(this.id);\n    service.subscribe((data: any[]) => {\n      this.dbs = data['response'];\n    });\n  }\n\n  dbTableCheked(table_selected, db_selected) {\n    if (!this.isDropTable) {\n      this.isDropTable = true;\n      this.activeDB = db_selected;\n      this.activeTable = table_selected;\n      this.dbActiveEvent.emit(db_selected);\n      this.tableActiveEvent.emit(table_selected);\n    }\n    else\n      this.isDropTable = false;\n  }\n}\n","Here are your DB's <button mat-button color=\"primary\" (click)=\"addDB()\">add DB <mat-icon>\n        add_circle</mat-icon></button>\n<mat-divider></mat-divider>\n<mat-accordion class=\"example-headers-align\" multi *ngFor=\"let db of dbs\">\n    <mat-expansion-panel>\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{db[0]}}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <button mat-button class=\"example-action-buttons\" [matMenuTriggerFor]=\"menu\">\n            <mat-icon>more_vert</mat-icon> See options</button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"addTable(db[0])\" aria-label=\"Add table\">\n                <mat-icon>add_circle</mat-icon> Add table\n            </button>\n            <button mat-menu-item (click)=\"dropDB(db[0])\" aria-label=\"Drop DB\">\n                <mat-icon>delete_forever</mat-icon> Drop\n            </button>\n            <button mat-menu-item (click)=\"downloadDB(db[0])\" aria-label=\"Download DB\">\n                <mat-icon>get_app</mat-icon> Download\n            </button>\n        </mat-menu>\n        <mat-selection-list #dbs_selected [multiple]=\"false\">\n            <mat-list-option *ngFor=\"let table of db[1]\" [value]=\"table\"\n                (click)=\"drawer.toggle(); dbTableCheked(dbs_selected.selectedOptions.selected[0]?.value, db[0])\">\n                <span>\n                    {{table}}\n                    <button mat-icon-button color=\"warn\" (click)=\"dropTable(table, db[0])\" aria-label=\"Drop table\">\n                        <mat-icon>delete_forever</mat-icon>\n                    </button>\n                </span>\n            </mat-list-option>\n        </mat-selection-list>\n    </mat-expansion-panel>\n</mat-accordion>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}